# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: designo-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "lambda:InvokeFunction"
            - "lambda:InvokeFunctionUrl"
            - "secretsmanager:GetSecretValue"
            - "s3:GetObject"
          Resource:
            - { "Fn::GetAtt": ["DesignoCalloutTable", "Arn"] }
            - "arn:aws:s3:::designo-image-bucket/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: src/handlers.hello
    events:
      - httpApi:
          path: /hello
          method: get
  getAbout:
    handler: src/dynamoProd/about.getAbout
    description: get an item from the DesignoAboutTable
  postAbout:
    handler: src/dynamoProd/about.postAbout
    description: add a new item to the DesignoAboutTable
  postAboutList:
    handler: src/dynamoProd/about.postAboutList
    description: add a list of new items to the DesignoAboutTable
  getCallout:
    handler: src/dynamoProd/callouts.getCallout
    description: get a single callout object
  postCallout:
    handler: src/dynamoProd/callouts.postCallout
    description: put a new callout object in the table
  postCallouts:
    handler: src/dynamoProd/callouts.postCallouts
    description: post a new list of callouts into the DesignoCalloutTable
  updateCallout:
    handler: src/dynamoProd/callouts.updateCallout
    description: update a single item in the DesignoCalloutTable
  postDesign:
    handler: src/dynamoProd/designs.postDesign
    description: update a single item in the DesignoDesignsTable
  postDesigns:
    handler: src/dynamoProd/designs.postDesigns
    description: add a list of items in the DesignoDesignsTable
  postLocation:
    handler: src/dynamoProd/locations.postLocation
    description: add a single item in the DesignoLocationsTable
  postLocations:
    handler: src/dynamoProd/locations.postLocations
    description: update a list of items in the DesignoLocationsTable
  postProduct:
    handler: src/dynamoProd/products.postProduct
    description: add a new product to the DesignoProductsTable
  postProducts:
    handler: src/dynamoProd/products.postProducts
    description: add a list of products to the DesignoProductsTable
  postSocial:
    handler: src/dynamoProd/socials.postSocial
    description: add a single item in the DesignoSocialsTable
  postSocials:
    handler: src/dynamoProd/socials.postSocials
    description: add a list of items in the DesignoSocialsTable
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-plugin-typescript
  - serverless-appsync-plugin

appSync:
  name: designo-graphql
  authentication:
    type: API_KEY
  apiKeys:
    - name: jason3
      description: Jason's API key.
      expiresAfter: 1M
  schema:
    - "src/graphql/*.graphql"
  pipelineFunctions:
    getAbout:
      dataSource: AboutTable
      request: src/velocityTemplates/about/item/request.vtl
      response: src/velocityTemplates/about/item/response.vtl
      description: get a single item from the AboutTable
    getAllAbout:
      dataSource: AboutTable
      request: src/velocityTemplates/about/items/request.vtl
      response: src/velocityTemplates/about/items/response.vtl
      description: get a list of items from the AboutTable
    getCallout:
      dataSource: CalloutTable
      request: src/velocityTemplates/callout/item/request.vtl
      response: src/velocityTemplates/callout/item/response.vtl
      description: get a single item from the CalloutTable
    getCallouts:
      dataSource: CalloutTable
      request: src/velocityTemplates/callout/items/request.vtl
      response: src/velocityTemplates/callout/items/response.vtl
      description: get a list of items from the CalloutTable
    getDesign:
      dataSource: DesignsTable
      request: src/velocityTemplates/design/item/request.vtl
      response: src/velocityTemplates/design/item/response.vtl
      description: get a single item from the DesignsTable
    getDesigns:
      dataSource: DesignsTable
      request: src/velocityTemplates/design/items/request.vtl
      response: src/velocityTemplates/design/items/response.vtl
      description: get a list of items from the DesignsTable
    getLocation:
      dataSource: LocationsTable
      request: src/velocityTemplates/location/item/request.vtl
      response: src/velocityTemplates/location/item/response.vtl
      description: get a single item from the LocationsTable
    getLocations:
      dataSource: LocationsTable
      request: src/velocityTemplates/location/items/request.vtl
      response: src/velocityTemplates/location/items/response.vtl
      description: get a list of items from the LocationsTable
    getProduct:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/item/request.vtl
      response: src/velocityTemplates/product/item/response.vtl
      description: get a single item from the ProductsTable
    getProductGroup:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/specificItems/request.vtl
      response: src/velocityTemplates/product/specificItems/response.vtl
      description: get a group of items based on the primary key in the ProductsTable
    getProducts:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/items/request.vtl
      response: src/velocityTemplates/product/items/response.vtl
      description: get a list of items from the ProductsTable
    getSocial:
      dataSource: SocialsTable
      request: src/velocityTemplates/social/item/request.vtl
      response: src/velocityTemplates/social/item/response.vtl
      description: get a single item from the SocialsTable
    getSocials:
      dataSource: SocialsTable
      request: src/velocityTemplates/social/items/request.vtl
      response: src/velocityTemplates/social/items/response.vtl
      description: get a list of items from the SocialsTable
  resolvers:
    Query.about:
      functions:
        - getAbout
    Query.allAbout:
      functions:
        - getAllAbout
    Query.callout:
      functions:
        - getCallout
    Query.callouts:
      functions:
        - getCallouts
    Query.design:
      functions:
        - getDesign
    Query.designs:
      functions:
        - getDesigns
    Query.location:
      functions:
        - getLocation
    Query.locations:
      functions:
        - getLocations
    Query.product:
      functions:
        - getProduct
    Query.productGroup:
      functions:
        - getProductGroup
    Query.products:
      functions:
        - getProducts
    Query.social:
      functions:
        - getSocial
    Query.socials:
      functions:
        - getSocials
  dataSources:
    AboutTable:
      type: AMAZON_DYNAMODB
      description: "The About table for Designo's website"
      config:
        tableName: DesignoAboutTable
    CalloutTable:
      type: AMAZON_DYNAMODB
      description: "The Callout table for Designo's website"
      config:
        tableName: DesignoCalloutTable
    DesignsTable:
      type: AMAZON_DYNAMODB
      description: "The Designs table for Designo's website"
      config:
        tableName: DesignoDesignsTable
    LocationsTable:
      type: AMAZON_DYNAMODB
      description: "The Locations table for Designo's website"
      config:
        tableName: DesignoLocationsTable
    ProductsTable:
      type: AMAZON_DYNAMODB
      description: "The Products table for Designo's website"
      config:
        tableName: DesignoProductsTable
    SocialsTable:
      type: AMAZON_DYNAMODB
      description: "The Socials table for Designo's website"
      config:
        tableName: DesignoSocialsTable
# you can add CloudFormation resource templates here
resources:
  Resources:
    DesignoAboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoAboutTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: AboutID
            AttributeType: S
        KeySchema:
          - AttributeName: AboutID
            KeyType: HASH
    DesignoCalloutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoCalloutTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: calloutID
            AttributeType: S
        KeySchema:
          - AttributeName: calloutID
            KeyType: HASH
    DesignoDesignsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoDesignsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: DesignID
            AttributeType: S
        KeySchema:
          - AttributeName: DesignID
            KeyType: HASH
    DesignoProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoProductsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: ProductType
            AttributeType: S
          - AttributeName: ProductID
            AttributeType: S
        KeySchema:
          - AttributeName: ProductType
            KeyType: HASH
          - AttributeName: ProductID
            KeyType: RANGE
    DesignoLocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoLocationsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: LocationID
            AttributeType: S
        KeySchema:
          - AttributeName: LocationID
            KeyType: HASH
    DesignoSocialsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoSocialsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: SocialID
            AttributeType: S
        KeySchema:
          - AttributeName: SocialID
            KeyType: HASH
    DesignoImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: designo-image-bucket
    DesignoImageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: designo-image-bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::designo-image-bucket/*
