service: designo-serverless

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "lambda:InvokeFunction"
            - "lambda:InvokeFunctionUrl"
            - "secretsmanager:GetSecretValue"
            - "s3:GetObject"
          Resource:
            - "arn:aws:s3:::designo-image-bucket/*"

functions:
  getAbout:
    handler: src/dynamoProd/about.getAbout
    description: get an item from the DesignoAboutTable
  postAbout:
    handler: src/dynamoProd/about.postAbout
    description: add a new item to the DesignoAboutTable
  postAboutList:
    handler: src/dynamoProd/about.postAboutList
    description: add a list of new items to the DesignoAboutTable
  getCallout:
    handler: src/dynamoProd/callouts.getCallout
    description: get a single callout object
  postCallout:
    handler: src/dynamoProd/callouts.postCallout
    description: put a new callout object in the table
  postCallouts:
    handler: src/dynamoProd/callouts.postCallouts
    description: post a new list of callouts into the DesignoCalloutTable
  updateCallout:
    handler: src/dynamoProd/callouts.updateCallout
    description: update a single item in the DesignoCalloutTable
  postDesign:
    handler: src/dynamoProd/designs.postDesign
    description: update a single item in the DesignoDesignsTable
  postDesigns:
    handler: src/dynamoProd/designs.postDesigns
    description: add a list of items in the DesignoDesignsTable
  postLocation:
    handler: src/dynamoProd/locations.postLocation
    description: add a single item in the DesignoLocationsTable
  postLocations:
    handler: src/dynamoProd/locations.postLocations
    description: update a list of items in the DesignoLocationsTable
  postProduct:
    handler: src/dynamoProd/products.postProduct
    description: add a new product to the DesignoProductsTable
  postProducts:
    handler: src/dynamoProd/products.postProducts
    description: add a list of products to the DesignoProductsTable
  postSocial:
    handler: src/dynamoProd/socials.postSocial
    description: add a single item in the DesignoSocialsTable
  postSocials:
    handler: src/dynamoProd/socials.postSocials
    description: add a list of items in the DesignoSocialsTable
  

plugins:
  - serverless-plugin-typescript
  - serverless-appsync-plugin

appSync:
  name: designo-graphql
  authentication:
    type: API_KEY
  apiKeys:
    - name: jason3
      description: Jason's API key.
      expiresAfter: 1M
  schema:
    - "src/graphql/*.graphql"
  pipelineFunctions:
    getAbout:
      dataSource: AboutTable
      request: src/velocityTemplates/about/item/request.vtl
      response: src/velocityTemplates/about/item/response.vtl
      description: get a single item from the AboutTable
    getAllAbout:
      dataSource: AboutTable
      request: src/velocityTemplates/about/items/request.vtl
      response: src/velocityTemplates/about/items/response.vtl
      description: get a list of items from the AboutTable
    getCallout:
      dataSource: CalloutTable
      request: src/velocityTemplates/callout/item/request.vtl
      response: src/velocityTemplates/callout/item/response.vtl
      description: get a single item from the CalloutTable
    getCallouts:
      dataSource: CalloutTable
      request: src/velocityTemplates/callout/items/request.vtl
      response: src/velocityTemplates/callout/items/response.vtl
      description: get a list of items from the CalloutTable
    getDesign:
      dataSource: DesignsTable
      request: src/velocityTemplates/design/item/request.vtl
      response: src/velocityTemplates/design/item/response.vtl
      description: get a single item from the DesignsTable
    getDesigns:
      dataSource: DesignsTable
      request: src/velocityTemplates/design/items/request.vtl
      response: src/velocityTemplates/design/items/response.vtl
      description: get a list of items from the DesignsTable
    getLocation:
      dataSource: LocationsTable
      request: src/velocityTemplates/location/item/request.vtl
      response: src/velocityTemplates/location/item/response.vtl
      description: get a single item from the LocationsTable
    getLocations:
      dataSource: LocationsTable
      request: src/velocityTemplates/location/items/request.vtl
      response: src/velocityTemplates/location/items/response.vtl
      description: get a list of items from the LocationsTable
    getProduct:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/item/request.vtl
      response: src/velocityTemplates/product/item/response.vtl
      description: get a single item from the ProductsTable
    getProductGroup:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/specificItems/request.vtl
      response: src/velocityTemplates/product/specificItems/response.vtl
      description: get a group of items based on the primary key in the ProductsTable
    getProducts:
      dataSource: ProductsTable
      request: src/velocityTemplates/product/items/request.vtl
      response: src/velocityTemplates/product/items/response.vtl
      description: get a list of items from the ProductsTable
    getSocial:
      dataSource: SocialsTable
      request: src/velocityTemplates/social/item/request.vtl
      response: src/velocityTemplates/social/item/response.vtl
      description: get a single item from the SocialsTable
    getSocials:
      dataSource: SocialsTable
      request: src/velocityTemplates/social/items/request.vtl
      response: src/velocityTemplates/social/items/response.vtl
      description: get a list of items from the SocialsTable
  resolvers:
    Query.about:
      functions:
        - getAbout
    Query.allAbout:
      functions:
        - getAllAbout
    Query.callout:
      functions:
        - getCallout
    Query.callouts:
      functions:
        - getCallouts
    Query.design:
      functions:
        - getDesign
    Query.designs:
      functions:
        - getDesigns
    Query.location:
      functions:
        - getLocation
    Query.locations:
      functions:
        - getLocations
    Query.product:
      functions:
        - getProduct
    Query.productGroup:
      functions:
        - getProductGroup
    Query.products:
      functions:
        - getProducts
    Query.social:
      functions:
        - getSocial
    Query.socials:
      functions:
        - getSocials
  dataSources:
    AboutTable:
      type: AMAZON_DYNAMODB
      description: "The About table for Designo's website"
      config:
        tableName: DesignoAboutTable
    CalloutTable:
      type: AMAZON_DYNAMODB
      description: "The Callout table for Designo's website"
      config:
        tableName: DesignoCalloutTable
    DesignsTable:
      type: AMAZON_DYNAMODB
      description: "The Designs table for Designo's website"
      config:
        tableName: DesignoDesignsTable
    LocationsTable:
      type: AMAZON_DYNAMODB
      description: "The Locations table for Designo's website"
      config:
        tableName: DesignoLocationsTable
    ProductsTable:
      type: AMAZON_DYNAMODB
      description: "The Products table for Designo's website"
      config:
        tableName: DesignoProductsTable
    SocialsTable:
      type: AMAZON_DYNAMODB
      description: "The Socials table for Designo's website"
      config:
        tableName: DesignoSocialsTable


resources:
  Parameters:
    CachePolicy:
      Description: specifies the default cache policy for the Designo CloudFront Distribution.
      Type: String
      Default: CachingOptimized
      AllowedValues:
        - CachingOptimized
        - CachingDisabled
        - CachingOptimizedForUncompressedObjects
        - Elemental-MediaPackage
        - Amplify
  Mappings:
    CachePolicyIds:
      CachingOptimized:
        Id: "658327ea-f89d-4fab-a63d-7e88639e58f6"
      CachingDisabled:
        Id: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
      CachingOptimizedForUncompressedObjects:
        Id: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
      Elemental-MediaPackage:
        Id: 08627262-05a9-4f76-9ded-b50ca2e3a84f
      Amplify:
        Id: 2e54312d-136d-493c-8eb9-b001f22f67d2
  Resources:
    DesignoAboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoAboutTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: AboutID
            AttributeType: S
        KeySchema:
          - AttributeName: AboutID
            KeyType: HASH
    DesignoCalloutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoCalloutTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: calloutID
            AttributeType: S
        KeySchema:
          - AttributeName: calloutID
            KeyType: HASH
    DesignoDesignsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoDesignsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: DesignID
            AttributeType: S
        KeySchema:
          - AttributeName: DesignID
            KeyType: HASH
    DesignoProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoProductsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: ProductType
            AttributeType: S
          - AttributeName: ProductID
            AttributeType: S
        KeySchema:
          - AttributeName: ProductType
            KeyType: HASH
          - AttributeName: ProductID
            KeyType: RANGE
    DesignoLocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoLocationsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: LocationID
            AttributeType: S
        KeySchema:
          - AttributeName: LocationID
            KeyType: HASH
    DesignoSocialsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: DesignoSocialsTable
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: SocialID
            AttributeType: S
        KeySchema:
          - AttributeName: SocialID
            KeyType: HASH
    DesignoImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: designo-image-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    DesignoImageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: designo-image-bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowCloudFrontServicePrincipalReadOnly
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource: arn:aws:s3:::designo-image-bucket/*
              Condition:
                StringEquals:
                  AWS:SourceArn: arn:aws:cloudfront::147962036763:distribution/E2U4EPDXOYPG7T
    DesignoDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt DesignoImageBucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity: ""
              OriginAccessControlId: !GetAtt DesignoCloudFrontOriginAccessControl.Id
          Enabled: true
          DefaultRootObject: assets/
          Comment: default route for distribution of contents
          DefaultCacheBehavior:
            CachePolicyId: !FindInMap [ CachePolicyIds, CachingOptimized, Id ]
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
          HttpVersion: http2
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          IPV6Enabled: false
    DesignoCloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: Allow access to designo-image-bucket through CloudFront
          Name: DesignoOAC
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
